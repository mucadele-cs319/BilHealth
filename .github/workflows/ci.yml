name: CI

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"
          cache-dependency-path: ClientApp/package-lock.json

      - name: Build All
        run: dotnet publish

  linter:
    name: Lint All
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Full git history is needed to get a proper list of changed files

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.102" # 6.0.200 breaks dotnet-format (https://github.com/dotnet/format/issues/1519)

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"
          cache: "npm"
          cache-dependency-path: ClientApp/package-lock.json

      - name: Lint .NET
        run: |
          mapfile -t csfiles < <(git diff --name-only --diff-filter=AM HEAD^ HEAD | grep '.*\.cs$')
          if [ ${#csfiles[@]} -ne 0 ]; then dotnet format --verify-no-changes --include "${csfiles[@]}"; fi

      - name: Lint Node.js
        run: |
          mapfile -t tsxfiles < <(git diff --name-only --diff-filter=AM HEAD^ HEAD | grep '.*\.tsx$')
          mapfile -t cssfiles < <(git diff --name-only --diff-filter=AM HEAD^ HEAD | grep '.*\.css$')
          if [ ${#tsxfiles[@]} -ne 0 ]; then npx --prefix ClientApp eslint "${tsxfiles[@]}"; fi
          if [ ${#tsxfiles[@]} -ne 0 ]; then npx --prefix ClientApp prettier --check "${tsxfiles[@]}"; fi
          if [ ${#cssfiles[@]} -ne 0 ]; then npx --prefix ClientApp prettier --check "${cssfiles[@]}"; fi

  # unittest: # Maybe this should use Docker instead? Or GitHub Actions "services"?
  #   name: Unit Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: "6.0.x"

  #     - name: Run Tests
  #       run: dotnet test
